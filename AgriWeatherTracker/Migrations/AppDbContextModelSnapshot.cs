// <auto-generated />
using System;
using AgriWeatherTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AgriWeatherTracker.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AgriWeatherTracker.Models.Crop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Crops");
                });

            modelBuilder.Entity("AgriWeatherTracker.Models.Weather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Humidity")
                        .HasColumnType("double precision");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<double>("Rainfall")
                        .HasColumnType("double precision");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Weathers");
                });

            modelBuilder.Entity("ConditionThreshold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("MaxRainfall")
                        .HasColumnType("double precision");

                    b.Property<double>("MaxTemperature")
                        .HasColumnType("double precision");

                    b.Property<double>("MinRainfall")
                        .HasColumnType("double precision");

                    b.Property<double>("MinTemperature")
                        .HasColumnType("double precision");

                    b.Property<double>("OptimalHumidity")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("ConditionThresholds");
                });

            modelBuilder.Entity("CropLocation", b =>
                {
                    b.Property<int>("CropId")
                        .HasColumnType("integer");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.HasKey("CropId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("CropLocations");
                });

            modelBuilder.Entity("GrowthCycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CropId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CropId");

                    b.ToTable("GrowthCycles");
                });

            modelBuilder.Entity("GrowthStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdverseConditionsId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("GrowthCycleId")
                        .HasColumnType("integer");

                    b.Property<int>("OptimalConditionsId")
                        .HasColumnType("integer");

                    b.Property<int>("ResilienceDurationInDays")
                        .HasColumnType("integer");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdverseConditionsId");

                    b.HasIndex("GrowthCycleId");

                    b.HasIndex("OptimalConditionsId");

                    b.ToTable("GrowthStages");
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("AgriWeatherTracker.Models.Weather", b =>
                {
                    b.HasOne("Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("CropLocation", b =>
                {
                    b.HasOne("AgriWeatherTracker.Models.Crop", "Crop")
                        .WithMany("CropLocations")
                        .HasForeignKey("CropId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Location", "Location")
                        .WithMany("CropLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("GrowthCycle", b =>
                {
                    b.HasOne("AgriWeatherTracker.Models.Crop", null)
                        .WithMany("GrowthCycles")
                        .HasForeignKey("CropId");
                });

            modelBuilder.Entity("GrowthStage", b =>
                {
                    b.HasOne("ConditionThreshold", "AdverseConditions")
                        .WithMany()
                        .HasForeignKey("AdverseConditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrowthCycle", null)
                        .WithMany("Stages")
                        .HasForeignKey("GrowthCycleId");

                    b.HasOne("ConditionThreshold", "OptimalConditions")
                        .WithMany()
                        .HasForeignKey("OptimalConditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdverseConditions");

                    b.Navigation("OptimalConditions");
                });

            modelBuilder.Entity("AgriWeatherTracker.Models.Crop", b =>
                {
                    b.Navigation("CropLocations");

                    b.Navigation("GrowthCycles");
                });

            modelBuilder.Entity("GrowthCycle", b =>
                {
                    b.Navigation("Stages");
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.Navigation("CropLocations");
                });
#pragma warning restore 612, 618
        }
    }
}
