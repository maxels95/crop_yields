import requests
from datetime import datetime, timezone

def post_growth_cycle(data):
    url = 'http://localhost:5045/api/GrowthCycle'
    response = requests.post(url, json=data)
    if response.status_code == 201:
        print(f"Successfully added Growth Cycle: {data['name']}")
    else:
        print(f"Failed to add Growth Cycle {data['name']}. Status code: {response.status_code}, Message: {response.text}")

def utc_datetime(year, month, day, hour, minute):
    return datetime(year, month, day, hour, minute, tzinfo=timezone.utc).isoformat()

def main():
    growth_cycle = {
        "id": 0,  # This should be auto-generated by the database if configured
        "name": "2024 Coffee Growth Cycle",
        "stages": [
            {
                "id": 1,  # This should be auto-generated by the database if configured
                "stageName": "Coffee Flowering",
                "startDate": utc_datetime(2024, 3, 1, 0, 0),
                "endDate": utc_datetime(2024, 4, 30, 23, 59),
                "optimalConditions": 3,  # ID for Coffee Flowering Optimal Conditions
                "adverseConditions": 1,  # ID for Coffee Flowering Adverse Conditions
                "resilienceDurationInDays": 4,
                "historicalAdverseImpactScore": 2.5
            },
            {
                "id": 2,  # This should be auto-generated by the database if configured
                "stageName": "Coffee Fruit Development",
                "startDate": utc_datetime(2024, 5, 1, 0, 0),
                "endDate": utc_datetime(2024, 9, 30, 23, 59),
                "optimalConditions": 4,  # ID for Coffee Fruit Development Optimal Conditions
                "adverseConditions": 2,  # ID for Coffee Fruit Development Adverse Conditions
                "resilienceDurationInDays": 3,
                "historicalAdverseImpactScore": 3.0
            }
        ]
    }

    post_growth_cycle(growth_cycle)

if __name__ == "__main__":
    main()
